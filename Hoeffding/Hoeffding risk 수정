#1. Shifted Logit
# Shifted logit Ï†ïÏùò
shifted_logit <- function(x, epsilon) {
  log(x + epsilon) + log(1 + epsilon) - log(1 - x + epsilon) - log(epsilon)
}

find_lambda_hat_infimum <- function(alpha, delta, y, pred, variance, n,
                                    lower = 0, upper = 30, step = 1e-3,
                                    epsilon = 1e-3, tol = 1e-6, verbose = TRUE) {
  # 1. threshold Í≥ÑÏÇ∞
  tau <- shifted_logit(1 - alpha, epsilon)
  a_n <- sqrt((1 / (2 * n)) * log(1 / delta)) * 2 * log((1 + epsilon) / epsilon)
  threshold <- tau - a_n
  
  # 2. Ï∂úÎ†•
  if (verbose) {
    cat("üîç [DEBUG INFO]\n")
    cat(sprintf("tau        = %.6f\n", tau))
    cat(sprintf("a_n        = %.6f\n", a_n))
    cat(sprintf("threshold  = %.6f\n", threshold))
    cat("------------\n")
  }
  
  # 3. lambda ÌÉêÏÉâ
  lambda_seq <- seq(lower, upper, by = step)
  
  for (lambda in lambda_seq) {
    # indicator function
    L_i <- as.numeric(y <= pred - sqrt(variance) * lambda |
                        y >= pred + sqrt(variance) * lambda)
    # shifted logit risk
    Z_i <- shifted_logit(L_i, epsilon)
    risk <- mean(Z_i, na.rm = TRUE)
    
    if (verbose && lambda %% 1 == 0) {
      cat(sprintf("lambda = %.4f | risk = %.6f\n", lambda, risk))
    }
    
    # 4. Ï≤òÏùåÏúºÎ°ú Ï°∞Í±¥ ÎßåÏ°±ÌïòÎäî lambda Î∞úÍ≤¨
    if (risk <= threshold) {
      if (verbose) cat(sprintf("‚úÖ Found infimum lambda = %.4f (risk = %.6f)\n", lambda, risk))
      return(lambda)
    }
  }
  
  # 5. Î™ª Ï∞æÏùÄ Í≤ΩÏö∞
  if (verbose) cat("‚ùå No lambda found satisfying risk ‚â§ threshold\n")
  return(NA)
}


# 2. Shifted Log
shifted_log <- function(x, epsilon) {
  log((1 + epsilon) / (x + epsilon))
}
find_lambda_hat <- function(alpha, delta, y, pred, variance, n,
                            lower = 0, upper = 30, step = 1e-3,
                            verbose = TRUE, plot_result = TRUE) {
  threshold <- alpha - sqrt(log(1 / delta) / (2 * n))
  threshold <- max(threshold, 0)  # üí° ÏùåÏàòÎ©¥ 0ÏúºÎ°ú Î≥¥Ï†ï
  
  lambda_seq <- seq(lower, upper, by = step)
  risks <- sapply(lambda_seq, function(lambda) {
    mean(y < pred - sqrt(variance) * lambda | y > pred + sqrt(variance) * lambda, na.rm = TRUE)
  })
  
  if (plot_result) {
    plot(lambda_seq, risks, type = "l", col = "blue",
         main = "Risk vs Lambda", xlab = "lambda", ylab = "Risk")
    abline(h = threshold, col = "red", lty = 2)
  }
  
  if (any(risks <= threshold)) {
    best_lambda <- min(lambda_seq[risks <= threshold]) #find infimum of lambda 
    if (verbose) cat(sprintf("‚úÖ lambda = %.4f (risk = %.6f)\n", best_lambda,
                             risks[which(lambda_seq == best_lambda)]))
    return(best_lambda)
  } else {
    if (verbose) cat("‚ùå No valid lambda found\n")
    return(NA)
  }
}



#3-1 Epsilon-Margin


#3-2. Early Stopping using window
find_lambda_hat<- function(alpha, delta, y, pred, variance, n,
                                   lower = 0, upper = 30, step = 1e-3,
                                   epsilon = 0, tol = 1e-6, window = 1000) {
  threshold <- alpha - sqrt(log(1 / delta) / (2 * n))
  lambda_seq <- seq(lower, upper, by = step)
  f_vals <- rep(NA, window)
  
  for (i in seq_along(lambda_seq)) {
    lambda <- lambda_seq[i]
    risk <- mean(
      y <= pred - sqrt(variance) * lambda |
        y >= pred + sqrt(variance) * lambda,
      na.rm = TRUE
    )
    f_val <- abs(risk - threshold)
    
    if (f_val <= epsilon) return(lambda)
    
    f_vals <- c(f_vals[-1], f_val)
    
    if (sum(!is.na(f_vals)) == window) {
      deltas <- diff(f_vals)
      if (all(abs(deltas) < tol)) return(lambda)
    }
  }
  
  return(NA)
}



#
