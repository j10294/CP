# hoeffding_simulation_Montecarlo
library(gam)
library(dplyr)
#---------------------------------------------필요한 함수 정의 
generate_data <- function(model, n) {
  x <- sort(runif(n, 0, 10)) # x도 랜덤하게 생성
  base <- 3 * cos(x) - 5 * (x / 15)^2
  
  if (model == 1) {
    y <- base + rnorm(n, mean = 0, sd = sqrt(2))
  }
  if (model == 2) {
    y <- base + rnorm(n, mean = 0, sd = sqrt(2 * x))
  }
  if (model == 3) {
    y <- base + 4 - rgamma(n, shape = 2, scale = 2)
  }
  if (model == 4) {
    y <- base + rt(n, df = 3)
  }
  if (model == 5) {
    sd_x <- 0.3 + 3 * exp(-(x - 5)^2 / (2 * 1.5^2))
    y <- base + rnorm(n, mean = 0, sd = sd_x)
  }
  if (model == 6) {
    y <- base + rnorm(n, mean = 0, sd = 1) + abs(rnorm(n, 0, 1))
  }
  if (model == 7) {
    noise <- ifelse(runif(n) < 0.7, rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 0, sd = 3))
    y <- base + noise
  }
  
  return(data.frame(x = x, y = y))
}


find_lambda_hat <- function(alpha, delta, y, pred, variance, n, lower=0, upper=5){
  f <- function(lambda, alpha, delta, y, pred, variance, n){
    risk <- mean(y <= pred - sqrt(variance)*lambda |
                   y >= pred + sqrt(variance)*lambda, na.rm=TRUE)
    threshold <- (1 - alpha) - sqrt(log(1/delta) / (2*n))
    return(risk - threshold)
  }
  lambda_hat <- tryCatch({
    uniroot(f, interval=c(lower, upper), alpha=alpha, delta=delta,
            y=y, pred=pred, variance=variance, n=n)$root
  }, error=function(e){
    optimize(function(lambda) f(lambda, alpha, delta, y, pred, variance, n),
             interval = c(lower, upper))$minimum
  })
  return(lambda_hat)
}
#------------------------------------------------------------------------------------------------
# 모델 번호와 샘플 크기 정의
models<-1:7
sample_sizes <- c(50, 100, 200, 500, 1000)

alpha <- 0.95
delta <- 0.90
M<-500

results <- data.frame()
pointwise_cov_list <- list()


for (model in models){
  for (n in sample_sizes){
    start_time <- Sys.time()
    
    picp_vec <- numeric(M)
    nmpiw_vec <- numeric(M)
    coverage_matrix <- matrix(NA, nrow = M, ncol = 1e+6)
    
    for (sim in 1:M){
      set.seed(sim+model*1000+n) #로 시드 다르게 설정
      
      data <- generate_data(model, n)
      
      x <- data$x
      y <- data$y
      
      n_test <- 1e+6
      n_train <- n/2
      n_cal <- n/2
      
      # 데이터 샘플링
      all_indices <- sample(n)
      train_index <- all_indices[1:n_train]
      cal_index <- all_indices[(n_train + 1):n]
      
      train_x <- x[train_index]
      train_y <- y[train_index]
      cal_x <- x[cal_index]
      cal_y <- y[cal_index]
      
      # test data 새롭게 생성
      set.seed(sim+model*10000+n)
      test_data <- generate_data(model, n_test)
      test_x <- test_data$x
      test_y <- test_data$y
      
      # 1. 훈련 데이터를 이용해 모델 학습 (평균 예측값 계산)
      fit <- smooth.spline(x = train_x, y = train_y, cv = FALSE, tol=1e-2)
      cal_mean_pred <- predict(fit, cal_x)$y  # mean prediction
      
      # 2. Calibration 데이터로 예측 오차의 분산 추정 (log scale로)
      train_res <- train_y - predict(fit, train_x)$y
      log_res2 <- log(train_res^2+1e-10)
      gam_model <- gam(log_res2 ~ s(train_x))
      log_pred <- predict(gam_model, newdata = data.frame(train_x = cal_x))
      cal_variance <- exp(log_pred) # 분산 추정값
      
      # 3. Tolerance Interval 계산 (분산을 포함한 계산)
      # 예시로 lambda_hat는 보통 특정 확률값을 기준으로 계산
      lambda_hat <- find_lambda_hat(alpha,delta , cal_y, cal_mean_pred, cal_variance, length(cal_y))
      
      TI_upper <- cal_mean_pred + sqrt(cal_variance) * lambda_hat
      TI_lower <- cal_mean_pred - sqrt(cal_variance) * lambda_hat
      
      train_coverage <- (cal_y >= TI_lower) & (cal_y <= TI_upper)
      
      # 4. 선형 보간을 이용해 test 데이터가 TI 구간에 포함되는지 계산 (PICP 계산)
      TI_lower_df <- aggregate(TI_lower ~ cal_x, FUN = mean)
      TI_upper_df <- aggregate(TI_upper ~ cal_x, FUN = mean)
      
      # 선형 보간
      interp_lower <- approx(x = TI_lower_df$cal_x, y = TI_lower_df$TI_lower, xout = test_x)$y
      interp_upper <- approx(x = TI_upper_df$cal_x, y = TI_upper_df$TI_upper, xout = test_x)$y
      
      # test_x에 대해 예측값이 TI 구간에 포함되었는지 여부 확인
      included <- (test_y >= interp_lower) & (test_y <= interp_upper)
      picp_vec[sim] <- mean(included, na.rm=TRUE)
      
      # NMPIW 계산
      interval_width <- interp_upper - interp_lower
      y_range <- max(test_y) - min(test_y)
      nmpiw_vec[sim]  <- mean(interval_width, na.rm = TRUE) / y_range
      
      coverage_matrix[sim, ] <- as.numeric(included)
    }
    
    end_time <- Sys.time()
    
    PICP_mean <- mean(picp_vec)
    NMPIW_mean <- mean(nmpiw_vec)
    
    results <- rbind(results, data.frame(model = model, sample_size = n,
                                         PICP_mean = PICP_mean,
                                         NMPIW_mean = NMPIW_mean
    ))
    
    mean_cov <- colMeans(coverage_matrix, na.rm = TRUE)
    df_cov <- data.frame(
      x = test_x,  # ← 여기에 사용
      coverage = mean_cov,
      model = paste("Model", model),
      sample_size = paste("n =", n)
    )
    pointwise_cov_list[[paste(model, n)]] <- df_cov
    
    
    elapsed <- round(difftime(end_time, start_time, units='secs'), 2)
    cat(sprintf("[DONE] Model %d, n = %d | PICP = %.4f | NMPIW = %.4f | Time = %s sec\n",
                model, n, PICP_mean, NMPIW_mean, elapsed))
  }
}

summary(results)



#--------------------------------------------- pointwise 별 coverage 시각화하여 나타내기 

df_pointwise <- do.call(rbind, pointwise_cov_list)

# factor로 정렬
df_pointwise_filtered <- df_pointwise  %>%
  mutate(
    model = as.integer(gsub("Model ", "", model)),
    sample_size = factor(sample_size, levels = c("n = 50", "n = 100", "n = 200", "n = 500", "n = 1000"))
  )

# 라벨 데이터 정리
label_df <- results %>%
  filter(sample_size %in% c(50, 100, 200, 500, 1000)) %>%
  mutate(
    model = model,
    sample_size = factor(paste0("n = ", sample_size), levels = c("n = 50", "n = 100", "n = 200", "n = 500", "n = 1000")),
    label = sprintf("PICP = %.3f\nNMPIW = %.3f", PICP_mean, NMPIW_mean),
    x = 1, y = 0.1
  )

summary(df_pointwise_filtered) #NA exists
df_clean <- df_pointwise_filtered %>% filter(!is.na(coverage))
# 시각화
# 모델 값 추출
model_list <- unique(df_clean$model)

# 저장용 폴더 생성 (필요시)
output_dir <- "pointwise_plots"
if (!dir.exists(output_dir)) dir.create(output_dir)

# 모델별로 플롯 저장
for (m in model_list) {
  df_sub <- df_clean %>% filter(model == m)
  
  p <- ggplot(df_sub, aes(x = x, y = coverage)) +
    geom_line(color = "blue") +
    geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
    facet_wrap(~ sample_size, ncol = 1) +  # 세로로 5개
    labs(title = paste("Model", m, "- Pointwise Coverage"),
         x = "x", y = "Coverage Probability") +
    theme_minimal(base_size = 12)
  
  file_name <- paste0(output_dir, "/model_", m, "_coverage.png")
  ggsave(file_name, plot = p, width = 6, height = 10, dpi = 300)
  
  cat(sprintf("✅ 저장 완료: %s\n", file_name))
}

