
library(gam)
library(gridExtra)
library(ggplot2)

# 데이터 생성
generate_data <- function(model, n) {
  x <- seq(0, 10, length.out = n)
  pop <- 3 * cos(x) - 5 * (x / 15)^2
  if (model == 1) y <- pop + rnorm(n, 0, sqrt(2))
  if (model == 2) y <- pop + rnorm(n, 0, sqrt(2 * x))
  if (model == 3) y <- pop + 4 - rgamma(n, shape = 2, scale = 2)
  if (model == 4) y <- pop + rt(n, df = 3)
  data.frame(x = x, y = y)
}

# lambda 계산
find_lambda_hat <- function(alpha, delta, y, pred, variance, n) {
  f <- function(lambda) {
    risk <- mean(y <= pred - sqrt(variance) * lambda | y >= pred + sqrt(variance) * lambda, na.rm = TRUE)
    threshold <- (1 - alpha) - sqrt(log(1 / delta) / (2 * n))
    risk - threshold
  }
  tryCatch({
    uniroot(f, c(0, 5))$root
  }, error = function(e) {
    optimize(f, c(0, 5))$minimum
  })
}

# 설정
models <- 1:4
sample_sizes <- c(50, 100, 200)
alpha <- 0.95
delta <- 0.90
set.seed(6)

plot_list_all_models <- list()

for (model in models) {
  for (n in sample_sizes) {
    data <- generate_data(model, n)
    idx <- sample(n)
    n_test <- n/2
    n_train <- floor(n/4)
    n_cal <- n - n_test - n_train
    train_x <- data$x[idx[1:n_train]]
    train_y <- data$y[idx[1:n_train]]
    cal_x <- data$x[idx[(n_train + 1):(2 * n_train)]]
    cal_y <- data$y[idx[(n_train + 1):(2 * n_train)]]
    test_x <- data$x[idx[(2 * n_train + 1):n]]
    test_y <- data$y[idx[(2 * n_train + 1):n]]
    
    fit <- smooth.spline(train_x, train_y, cv = FALSE)
    cal_pred <- predict(fit, cal_x)$y
    train_res <- train_y - predict(fit, train_x)$y
    
    log_res2 <- log(train_res^2 + 1e-10)
    gam_model <- gam(log_res2 ~ s(train_x))
    log_pred <- predict(gam_model, newdata = data.frame(train_x = cal_x))
    cal_var <- exp(log_pred)
    
    lambda_hat <- find_lambda_hat(alpha, delta, cal_y, cal_pred, cal_var, length(cal_y))
    TI_upper <- cal_pred + sqrt(cal_var) * lambda_hat
    TI_lower <- cal_pred - sqrt(cal_var) * lambda_hat
    
    interp_upper <- approx(cal_x, TI_upper, test_x, rule = 2)$y
    interp_lower <- approx(cal_x, TI_lower, test_x, rule = 2)$y
    covered <- (test_y >= interp_lower) & (test_y <= interp_upper)
    picp <- mean(covered, na.rm = TRUE)
    nmpiw <- mean(interp_upper - interp_lower, na.rm = TRUE) / (max(test_y) - min(test_y))
    
    df_TI <- data.frame(x = cal_x, lower = TI_lower, upper = TI_upper)
    df_test <- data.frame(x = test_x, y = test_y, covered = covered)
    
    p <- ggplot() +
      geom_ribbon(data = df_TI, aes(x = x, ymin = lower, ymax = upper), fill = "green", alpha = 0.3) +
      geom_point(data = df_test, aes(x = x, y = y, color = covered), size = 1.5) +
      scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
      labs(
        title = paste("Model", model, "- Sample size =", n),
        subtitle = sprintf("PICP = %.3f, NMPIW = %.3f", picp, nmpiw),
        x = "x", y = "y"
      ) +
      theme_minimal(base_size = 12)
    
    plot_list_all_models[[paste0("Model_", model, "_n_", n)]] <- p
  }
}


# 모델별 3x1 plot 출력
for (model in models) {
  plots <- lapply(sample_sizes, function(n) plot_list_all_models[[paste0("Model_", model, "_n_", n)]])
  grid.arrange(grobs = plots, ncol = 1, top = paste("Model", model))
}
