library(splines)
library(foreach)
library(doParallel)

# 1. 데이터 생성 함수 정의
generate_data <- function(model, n) {
  x <- seq(0, 10, length.out = n)
  pop <- 3 * cos(x) - 5 * (x / 15)^2
  if (model == 1) {
    y <- 3 * cos(x) - 5 * (x / 15)^2 + rnorm(n, mean = 0, sd = sqrt(2))
  }
  if (model == 2) {
    y <- 3 * cos(x) - 5 * (x / 15)^2 + rnorm(n, mean = 0, sd = sqrt(2 * x))
  }
  if (model == 3) {
    y <- 3 * cos(x) - 5 * (x / 15)^2 + 4 - rgamma(n, shape = 2, scale = 2)
  }
  if (model == 4) {
    y <- 3 * cos(x) - 5 * (x / 15)^2 + rt(n, df = 3)
  }
  return(data.frame(x = x, y = y, pop = pop))
}

# 벡터의 L2 norm 계산 함수
compute_norm <- function(vector) {
  return(sqrt(sum(vector^2)))
}

compute_probability <- function(nu, t, P, k, norm_lx_h) {
  tryCatch({
    q_val <- qchisq(P, df = 1, ncp = t^2)
    lhs <- q_val / ((t * sqrt(5 / nu)) + 1)
    
    # 벡터 입력 대응
    out <- numeric(length(q_val))
    
    for (i in seq_along(q_val)) {
      q <- q_val[i]
      l <- lhs[i]
      
      # 계산 불가한 경우
      if (is.nan(q) || is.nan(l) || is.na(q) || is.na(l)) {
        out[i] <- 0
        next
      }
      
      if (l <= k^2) {
        threshold <- (nu * q) / (k^2)
        if (is.nan(threshold) || is.na(threshold)) {
          out[i] <- 0
          next
        }
        
        prob <- pchisq(threshold, df = nu, lower.tail = FALSE)
        if (is.nan(prob) || is.na(prob)) {
          out[i] <- 1e-6
        } else {
          out[i] <- prob
        }
      } else {
        out[i] <- 0
      }
    }
    
    return(out)
  }, error = function(e) {
    warning("compute_probability 계산 오류 발생")
    return(rep(0, length(t)))  # t가 벡터면 그 길이에 맞게 0 반환
  })
}


# 적분 함수
integrand <- function(t, k, nu, P, norm_lx_h) {
  exp_term <- exp(-t^2 / (2 * norm_lx_h^2))
  prob_term <- compute_probability(nu, t, P, k, norm_lx_h)
  
  if (log(exp_term) < -20) {
    #cat(sprintf("⚠️ 너무 작은 적분항: log(exp) = %.2f (t = %.4f, k = %.4f)\n",
                log(exp_term), t, k))
    return(1e-10)
  }
  
  return(exp_term * prob_term)
}

# upper bound 계산 함수
find_upper_bound_t <- function(k, nu, P) {
  t_seq <- seq(0.01, 20, by = 0.1)
  valid_t <- sapply(t_seq, function(t) {
    q_val <- qchisq(P, df = 1, ncp = t^2)
    lhs <- q_val / ((t * sqrt(5 / nu)) + 1)
    return(length(lhs) == 1 && !is.na(lhs) && lhs <= k^2)
  })
  
  if (any(valid_t)) {
    return(max(t_seq[valid_t]))
  } else {
    warning("조건을 만족하는 t가 없음 — fallback to t = 15")
    return(15)
  }
}

# k-factor 계산 함수
find_k_factor <- function(nu, norm_lx_h, P = 0.90, gamma = 0.95, index = NA) {
  start_time <- Sys.time()
  cat("▶️ k-factor 계산 시작: index =", index, "\n")
  
  obj_func <- function(k) {
    upper_bound <- find_upper_bound_t(k, nu, P)
    
    if (is.na(upper_bound) || is.infinite(upper_bound) || upper_bound < 1e-6) {
      warning("upper_bound가 이상함 → fallback")
      return(1e6)
    }
    
    tryCatch({
      integral_result <- integrate(
        Vectorize(integrand),   # 함수 벡터화
        lower = 0, upper = upper_bound,
        k = k, nu = nu, P = P, norm_lx_h = norm_lx_h
      )$value
      
      pi_term <- sqrt(2 / (pi * norm_lx_h^2))
      final_val <- pi_term * integral_result
      error <- abs(final_val - gamma)
      
      cat(sprintf("🧪 [OK] k=%.4f | norm=%.4f | integral=%.3e | final=%.5f | gamma=%.2f | error=%.4f\n",
                  k, norm_lx_h, integral_result, final_val, gamma, error))
      return(error)
    }, error = function(e) {
      cat(sprintf("❌ 적분에서 에러: k=%.4f, norm=%.4f\n", k, norm_lx_h))
      cat("🔍 이유: ", e$message, "\n")
      return(Inf)
    })
  }
  
  tryCatch({
    out <- optimize(obj_func, interval = c(0.01, 10), tol = 1e-2)$minimum
    elapsed <- Sys.time() - start_time
    cat("✅ index =", index, ", 최적 k =", round(out, 5), ", 시간:", round(elapsed, 2), "초\n")
    return(out)
  }, error = function(e) {
    warning("k 최적화 실패 → fallback 적용됨 (index =", index, ")")
    return(NA)
  })
}


# 6. 데이터 변환 함수 
transform_function <- function(models, sample_sizes, M, seed) {
  set.seed(seed)
  transformed_data_list <- list()
  raw_data_list <- list()
  
  for (model in models) {
    for (m in sample_sizes) {
      transformed_data <- matrix(NA, nrow = m, ncol = M)
      raw_data <- vector("list", M)
      
      # 데이터의 분산을 추정해 추정된 분산으로 데이터를 나누어 transform
      for (i in 1:M) {
        data <- generate_data(model, m)
        x <- data$x
        y <- data$y
        fit <- smooth.spline(x = x, y = y, cv = FALSE) #논문 방법과 동일하게 GCV 사용
        pred_y <- predict(fit, x)$y
        residuals <- y - pred_y
        
        log_variance_fit <- smooth.spline(x = x, y = log(residuals^2 + 1e-6), cv = FALSE)
        log_variance_hat <- predict(log_variance_fit, x)$y
        variance_hat <- exp(log_variance_hat)
        
        variance_hat[is.nan(variance_hat) | is.infinite(variance_hat)] <- 1e-6
        transform_y <- y / sqrt(variance_hat)
        
        transformed_data[, i] <- transform_y
        raw_data[[i]] <- data.frame(x = x, y = y, variance_hat = variance_hat)
      }
      
      transformed_data_list[[paste0("Model_", model, "_m_", m)]] <- transformed_data
      raw_data_list[[paste0("Model_", model, "_m_", m)]] <- raw_data
    }
  }
  
  return(list(transformed = transformed_data_list, raw = raw_data_list))
}

# 7. 시각화 함수
plot_ti <- function(x, y, TI_lower, TI_upper, pred_mean, varname, covered, picp, nmpiw, cwc) {
  df <- data.frame(
    x = x, y = y,
    lower = TI_lower, upper = TI_upper,
    pred = pred_mean, covered = covered
  )
  p <- ggplot(df, aes(x = x, y = y)) +
    geom_point(aes(color = covered), size = 1.5) +
    geom_ribbon(aes(ymin = lower, ymax = upper), fill = "green", alpha = 0.3) +
    geom_line(aes(y = pred), color = "darkgreen", size = 0.7) +
    labs(
      title = paste0("TI for ", varname),
      subtitle = sprintf("PICP=%.3f, NMPIW=%.3f, CWC=%.3f", picp, nmpiw, cwc),
      x = "x", y = varname
    ) +
    theme_minimal(base_size = 11) +
    scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red"))
  return(p)
}
