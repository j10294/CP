library(splines)
library(ggplot2)
library(gridExtra)
library(grid)
library(foreach)
library(doParallel)
library(MASS)

# CPU 코어 개수 확인 및 병렬 클러스터 설정
num_cores <- detectCores() - 1 
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# 데이터 생성 함수 정의
generate_data <- function(model, n) {
  x <- seq(0, 10, length.out = n)
  pop <- 3 * cos(x) - 5 * (x / 15)^2
  if (model == 1) {
    y <- 3 * cos(x) - 5 * (x / 15)^2 + rnorm(n, mean = 0, sd = sqrt(2))
  }
  if (model == 2) {
    y <- 3 * cos(x) - 5 * (x / 15)^2 + rnorm(n, mean = 0, sd = sqrt(2 * x))
  }
  if (model == 3) {
    y <- 3 * cos(x) - 5 * (x / 15)^2 + 4 - rgamma(n, shape = 2, scale = 2)
  }
  if (model == 4) {
    y <- 3 * cos(x) - 5 * (x / 15)^2 + rt(n, df = 3)
  }
  return(data.frame(x = x, y = y, pop = pop))
}

# 벡터의 L2 norm 계산 함수
compute_norm <- function(vector) {
  return(sqrt(sum(vector^2)))
}

# Prop 3.1 내의 확률부분을 계산하는 함수 
compute_probability <- function(nu, t, P, k, norm_lx_h) {
  tryCatch({
    ncp_value <- min(t^2, 10^2)
    safe_qchisq <- qchisq(P, df = 1, ncp = ncp_value)
    if (k <= 1e-6) return(1e-6)
    threshold <- (nu * safe_qchisq) / (k^2)
    if (threshold > 10^2) return(1e-6)
    probability <- pchisq(threshold, df = nu, lower.tail = FALSE)
    if (is.na(probability) || is.nan(probability) || is.infinite(probability)) return(1e-6)
    return(probability)
  }, error = function(e) {
    warning("compute_probability 계산 오류 발생, 근사값 사용")
    #return(1e-6)
  })
}

# Prop 3.1 의 적분식을 계산하는 함수
integrand <- function(t, k, nu, P, norm_lx_h) {
  chi_prob <- compute_probability(nu, t, P, k, norm_lx_h)
  exp_term <- exp(-t^2 / (2 * norm_lx_h^2))
  return(chi_prob * exp_term)
}

# Prop 3.1 을 만족하는 k를 찾는 함수
find_k_factor <- function(nu, norm_lx_h, P = 0.90, gamma = 0.95) {
  obj_func <- function(k) {
    integral_result <- tryCatch({
      integrate(integrand, lower = 0, upper = 100, k = k, nu = nu, P = P, norm_lx_h = norm_lx_h)$value
    }, error = function(e) {
      warning("적분 실패")
      #return(1e-6)
    })
    
    pi_term <- sqrt(2 / (pi * norm_lx_h^2))
    return(abs((pi_term * integral_result) - gamma))
  }
  tryCatch({
    return(optimize(obj_func, interval = c(0.01, 5))$minimum)
  }, error = function(e) {
    warning("find_k_factor 계산 실패: 근사값 사용")
    #return(1) #근사값은 오차항이 정규분포를 따른다는 가정에서만 사용 가능하므로, 근사값은 사용하지 않기로 결정.
  })
}

# 데이터 변환 함수 (Discussion 에서 이분산 가정의 경우 이런식으로 분산 추정 후 이를 이용해 다시 paper method 적용시켜야 함.)
transform_function <- function(models, sample_sizes, M, seed) {
  set.seed(seed)
  transformed_data_list <- list()
  raw_data_list <- list()
  
  for (model in models) {
    for (m in sample_sizes) {
      transformed_data <- matrix(NA, nrow = m, ncol = M)
      raw_data <- vector("list", M)
      
      for (i in 1:M) {
        data <- generate_data(model, m)
        x <- data$x
        y <- data$y
        fit <- smooth.spline(x = x, y = y, cv = FALSE)
        pred_y <- predict(fit, x)$y
        residuals <- y - pred_y
        
        log_variance_fit <- smooth.spline(x = x, y = log(residuals^2 + 1e-6), cv = FALSE)
        log_variance_hat <- predict(log_variance_fit, x)$y
        variance_hat <- exp(log_variance_hat)
        
        variance_hat[is.nan(variance_hat) | is.infinite(variance_hat)] <- 1e-6
        transform_y <- y / sqrt(variance_hat)
        
        transformed_data[, i] <- transform_y
        raw_data[[i]] <- data.frame(x = x, y = y, variance_hat = variance_hat)
      }
      
      transformed_data_list[[paste0("Model_", model, "_m_", m)]] <- transformed_data
      raw_data_list[[paste0("Model_", model, "_m_", m)]] <- raw_data
    }
  }
  
  return(list(transformed = transformed_data_list, raw = raw_data_list))
}
