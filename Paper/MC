library(splines)
library(MASS)


monte_carlo_results <- list()

transform_and_evaluate <- function(models, sample_sizes, M, seed) {
  set.seed(seed)
  monte_carlo_results <- list()
  
  for (model in models) {
    for (m in sample_sizes) {
      cat(sprintf("\n[START] Model: %d, Sample size: %d\n", model, m))
      start_time <- Sys.time()
      
      coverage_matrix <- matrix(0, nrow = m / 2, ncol = M)
      width_matrix <- matrix(0, nrow = m / 2, ncol = M)
      
      for (i in 1:M) {
        if (i %% 50 == 0) cat(sprintf("  Iteration %d / %d\n", i, M))
        
        data_i <- generate_data(model, m)
        x <- data_i$x
        y <- data_i$y
        pop <- data_i$pop
        
        idx <- sample(1:m, size = m / 2)
        train_x <- x[idx]; train_y <- y[idx]
        test_x <- x[-idx]; test_y <- y[-idx]
        
        fit <- smooth.spline(x = train_x, y = train_y, cv = FALSE)
        pred_train <- predict(fit, train_x)$y
        residuals <- train_y - pred_train
        
        log_variance_fit <- smooth.spline(x = train_x, y = log(residuals^2 + 1e-6), cv = FALSE)
        variance_hat_train <- exp(predict(log_variance_fit, train_x)$y)
        variance_hat_test <- exp(predict(log_variance_fit, test_x)$y)
        variance_hat_test[is.na(variance_hat_test) | is.infinite(variance_hat_test)] <- 1e-6
        
        transform_y_train <- train_y / sqrt(variance_hat_train)
        fit_trans <- smooth.spline(x = train_x, y = transform_y_train, cv = FALSE)
        pred_test <- predict(fit_trans, test_x)$y
        
        B <- bs(train_x, df = fit_trans$df)
        D <- diff(diag(ncol(B)), differences = 2)
        S_inv <- ginv(t(B) %*% B + fit_trans$lambda * t(D) %*% D)
        S <- B %*% S_inv %*% t(B)
        I_n <- diag(length(train_x))
        R <- I_n - S
        
        residuals <- transform_y_train - predict(fit_trans, train_x)$y
        est_var <- (t(residuals) %*% residuals) / sum(diag(t(R) %*% R))
        est_var <- ifelse(is.na(est_var) | is.nan(est_var) | is.infinite(est_var), 1e-6, est_var)
        
        num <- sum(diag(t(R) %*% R))^2
        den <- sum(diag((t(R) %*% R)^2))
        nu <- num / den
        
        norm_lx_h_values <- rep(1, length(test_x))
        k_factors <- sapply(norm_lx_h_values, function(nlh) find_k_factor(nu = nu, norm_lx_h = nlh))
        
        TI_upper <- pred_test + sqrt(est_var) * k_factors
        TI_lower <- pred_test - sqrt(est_var) * k_factors
        TI_upper <- TI_upper * sqrt(variance_hat_test)
        TI_lower <- TI_lower * sqrt(variance_hat_test)
        
        coverage_matrix[, i] <- (test_y >= TI_lower) & (test_y <= TI_upper)
        width_matrix[, i] <- TI_upper - TI_lower
      }
      
      end_time <- Sys.time()
      duration <- round(difftime(end_time, start_time, units = "mins"), 2)
      cat(sprintf("[END] Model: %d, Sample size: %d — %.2f minutes\n", model, m, duration))
      
      #PICP
      coverage_probabilities <- rowMeans(coverage_matrix)
      
      #NMPIW
      range_y <- max(test_y) - min(test_y)
      normalized_width <- width_matrix / range_y
      nmpiw <- rowMeans(normalized_width)
      
      #Mean Width
      mean_width <- rowMeans(width_matrix)
      
      monte_carlo_results[[paste0("Model_", model, "_m_", m)]] <- 
        data.frame(x = sort(test_x), coverage_probabilities = coverage_probabilities, mean_width = mean_width, NMPIW = nmpiw)
    }
  }
  
  return(monte_carlo_results)
}

seed = 123
M=500
models <- c(1, 2, 3, 4)
sample_sizes <- c(50, 100, 200)

# 결과 저장 
monte_carlo_results <- transform_and_evaluate(models, sample_sizes, M, seed=seed)

# 결과를 하나의 데이터프레임으로 정리
results <- monte_carlo_results
summary_df <- do.call(rbind, lapply(names(results), function(name) {
  df <- monte_carlo_results[[name]]
  df_summary <- data.frame(
    Model = sub("Model_(\\d+)_.*", "\\1", name),
    SampleSize = sub("._m_(\\d+)", "\\1", name),
    PICP = mean(df$coverage_probabilities, na.rm=TRUE),
    NMPIW = mean(df$NMPIW, na.rm=TRUE)
  )
  return(df_summary)
}))

summary_df
summary_df$SampleSize <- as.integer(gsub("Model_", "", summary_df$SampleSize))
summary_df$Model <- as.integer(summary_df$Model)
summary_df <- summary_df[order(summary_df$Model, summary_df$SampleSize), ]

library(knitr)
kable(summary_df, caption='(Paper) 모델별, 샘플 크기별 PICP, NMPIW')

