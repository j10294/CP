library(ggplot2)
library(patchwork)  # plot 붙이기용

plot_list <- list()

for (y_var in target_vars[1:9]) {
  # --- 평균 PICP, NMPIW 계산 ---
  matching_keys <- grep(paste0("^", y_var, "_seed_"), names(results_list), value = TRUE)
  PICP_vals <- sapply(matching_keys, function(k) results_list[[k]]$PICP)
  NMPIW_vals <- sapply(matching_keys, function(k) results_list[[k]]$NMPIW)
  
  mean_picp <- round(mean(PICP_vals), 3)
  mean_nmpiw <- round(mean(NMPIW_vals), 3)
  
  # --- seed=1 기반 시각화용 데이터 준비 ---
  seed <- 1
  set.seed(seed)
  m <- nrow(data)
  n_test <- 115
  n_train <- m - n_test
  idx <- sample(seq_len(m))
  train_idx <- idx[1:n_train]
  test_idx <- idx[(n_train+1):m]
  
  x <- data$AGE
  raw_y <- data[[y_var]]
  
  train_x <- x[train_idx]
  test_x <- x[test_idx]
  raw_train_y <- raw_y[train_idx]
  raw_test_y <- raw_y[test_idx]
  
  # 평균 및 분산 추정
  raw_fit <- smooth.spline(train_x, raw_train_y, cv=FALSE)
  raw_pred_y <- predict(raw_fit, train_x)$y
  raw_residuals <- raw_train_y - raw_pred_y
  log_res2 <- log(raw_residuals^2 + 1e-20)
  variance_fit <- gam(log_res2 ~ s(train_x))
  var_list <- exp(predict(variance_fit, newdata = data.frame(train_x = train_x)))
  train_y <- raw_train_y / sqrt(var_list)
  
  # TI 추정
  fit <- smooth.spline(train_x, train_y, cv=FALSE)
  residuals <- predict(fit, train_x)$y - train_y
  B <- bs(train_x, df=max(fit$df), 3)
  D <- diff(diag(ncol(B)), differences=2)
  S_inv <- ginv(t(B) %*% B + fit$lambda * t(D) %*% D)
  smoother_matrix <- B %*% S_inv %*% t(B)
  I_n <- diag(length(train_x))
  residual_matrix <- I_n - smoother_matrix
  estimated_variance <- (t(residuals) %*% residuals) / (sum(diag(t(residual_matrix) %*% residual_matrix)))
  
  norm_lx_h_values <- apply(smoother_matrix, 1, compute_norm)
  numerator <- sum(diag(t(residual_matrix) %*% residual_matrix))^2
  denominator <- sum(diag((t(residual_matrix) %*% residual_matrix)^2))
  nu <- numerator / denominator
  k_factors <- sapply(norm_lx_h_values, function(nlh) find_k_factor(nu=nu, norm_lx_h = nlh))
  
  pred_y <- predict(fit,train_x)$y
  TI_upper <- pred_y + k_factors * c(estimated_variance)
  TI_lower <- pred_y - k_factors * c(estimated_variance)
  
  raw_TI_upper <- TI_upper * sqrt(var_list)
  raw_TI_lower <- TI_lower * sqrt(var_list)
  
  # 보간 후 포함 여부 계산
  TI_lower_df <- aggregate(raw_TI_lower ~ train_x, FUN = mean)
  TI_upper_df <- aggregate(raw_TI_upper ~ train_x, FUN = mean)
  interp_lower <- approx(x = TI_lower_df$train_x, y = TI_lower_df$raw_TI_lower, xout = test_x)$y
  interp_upper <- approx(x = TI_upper_df$train_x, y = TI_upper_df$raw_TI_upper, xout = test_x)$y
  covered <- (raw_test_y >= interp_lower) & (raw_test_y <= interp_upper)
  
  mean_picp <- mean(covered, na.rm=TRUE)
  width <- TI_upper - TI_lower
  range_y <- max(raw_test_y) - min(raw_test_y)
  mean_nmpiw <- mean(width, na.rm=TRUE)/range_y
  
  # 시각화용 데이터프레임
  plot_df <- data.frame(
    x = train_x,
    pred_y = predict(fit, train_x)$y * sqrt(var_list),
    TI_lower = raw_TI_lower,
    TI_upper = raw_TI_upper
  )
  test_plot_df <- data.frame(x = test_x, y = raw_test_y, covered = covered)
  
  # 그래프 생성
  p <- ggplot() +
    geom_point(data=test_plot_df, aes(x=x, y=y, color=covered), alpha=0.8) +
    scale_color_manual(values=c("FALSE" = "red", "TRUE" = "blue")) +
    geom_line(data=plot_df, aes(x=x, y=pred_y), color='darkgreen', size=1) +
    geom_ribbon(data = plot_df, aes(x = x, ymin = TI_lower, ymax = TI_upper), fill = "green", alpha = 0.2) +
    labs(title = paste0("TI for ", y_var, "\nPICP=", round(mean_picp,3), ", NMPIW=", round(mean_nmpiw,3)),
         x = "AGE", y = y_var) +
    theme_minimal(base_size = 12) +
    theme(legend.position = "right")
  
  plot_list[[y_var]] <- p
}

# patchwork로 3x3 그리드 조합
final_plot <- wrap_plots(plot_list, ncol = 3)
print(final_plot)
