#-----------------------------------------------------------# 필요한 함수 ##
# 벡터의 L2 norm 계산 함수
compute_norm <- function(vector) {
  return(sqrt(sum(vector^2)))
}

# 확률 계산 함수 (Prop 3.1 내부)
compute_probability <- function(nu, t, P, k, norm_lx_h) {
  tryCatch({
    q_val <- suppressWarnings(qchisq(P, df = 1, ncp = t^2))
    if (is.na(q_val) || is.nan(q_val) || is.infinite(q_val)) return(1e-6)
    
    lhs <- q_val / ((t * sqrt(5 / nu)) + 1)
    if (lhs <= k^2) {
      threshold <- (nu * q_val) / (k^2)
      prob <- suppressWarnings(pchisq(threshold, df = nu, lower.tail = FALSE))
      if (is.na(prob) || is.nan(prob) || is.infinite(prob)) return(1e-6)
      return(prob)
    } else {
      return(0)
    }
  }, error = function(e) {
    warning("compute_probability 계산 오류 발생")
    return(1e-6)
  })
}


# 적분 함수
integrand <- function(t, k, nu, P, norm_lx_h) {
  # exp_term 계산
  exp_term <- exp(-t^2 / (2 * norm_lx_h^2))
  exp_term[is.nan(exp_term) | is.infinite(exp_term) | exp_term < 1e-10] <- 0
  
  # prob_term 계산 (벡터 t에 대해 반복 적용)
  prob_term <- sapply(t, function(ti) {
    compute_probability(nu, ti, P, k, norm_lx_h)
  })
  
  # 결합 및 방어
  result <- exp_term * prob_term
  result[is.nan(result) | is.infinite(result)] <- 0
  return(result)
}



find_upper_bound_t <- function(k, nu, P) {
  t_seq <- seq(0.01, 20, by = 0.01)  # 너무 큰 t는 제거 (적분 범위가 커져서 실패 위험 높아짐)
  
  for (t in t_seq) {
    q_val <- suppressWarnings(qchisq(P, df = 1, ncp = t^2))
    if (is.na(q_val) || is.nan(q_val) || is.infinite(q_val)) next
    
    lhs <- q_val / ((t * sqrt(5 / nu)) + 1)
    if (!is.na(lhs) && lhs <= k^2) {
      return(t)  # 조건 만족하는 최소의 t 반환
    }
  }
  
  warning("❌ 조건 만족하는 t를 찾지 못했음 — fallback to t = 10")
  return(10)
}



# k-factor 계산 함수
find_k_factor <- function(nu, norm_lx_h, P = 0.90, gamma = 0.95, index = NA) {
  start_time <- Sys.time()
  cat("▶️ k-factor 계산 시작: index =", index, "\n")
  
  obj_func <- function(k) {
    cat("➡️ optimize 중 k 시도값 =", k, "\n")
    upper_bound <- find_upper_bound_t(k, nu, P)
    
    if (is.na(upper_bound) || is.infinite(upper_bound) || upper_bound < 1e-6) {
      warning("upper_bound가 이상함 → fallback")
      return(NA)
    }
    
    result <- tryCatch({
      integral_result <- integrate(integrand, lower = 0, upper = upper_bound,
                                   k = k, nu = nu, P = P, norm_lx_h = norm_lx_h)$value
      if (is.na(integral_result) || is.nan(integral_result)) return(NA)
      pi_term <- sqrt(2 / (pi * norm_lx_h^2))
      error <- abs((pi_term * integral_result) - gamma)
      cat("  ⏳ k =", round(k, 5), ", integral =", round(integral_result, 5), ", error =", round(error, 5), "\n")
      return(error)
    }, error = function(e) {
      warning("적분 실패")
      return(NA)
    })
    
    return(result)
  }
  
  opt_result <- tryCatch({
    optimize(obj_func, interval = c(0.01, 5), tol = 1e-2)
  }, error = function(e) {
    warning("k 최적화 자체에 실패함")
    return(NULL)
  })
  
  elapsed <- Sys.time() - start_time
  
  if (!is.null(opt_result) &&
      is.list(opt_result) &&
      is.numeric(opt_result$objective) &&
      !is.na(opt_result$objective) &&
      is.finite(opt_result$objective)) {
    
    cat("✅ index =", index, ", 최적 k =", round(opt_result$minimum, 5), ", 시간:", round(elapsed, 2), "초\n")
    return(opt_result$minimum)
    
  } else {
    cat("⚠️ index =", index, ", 최적화 실패 → 근사값으로 대체\n")
    approx_k <- sqrt(nu * qchisq(p = P, df = 1, ncp = norm_lx_h^2) /
                       qchisq(p = 1 - gamma, df = nu, ncp = 0))
    return(approx_k)
  }
}


#-----------------------------------------------------------# 필요한 함수 ##

# 1. 데이터 준비
data <- read.csv("/Users/hdmt306/Downloads/plasma.csv")

# 데이터 (2d)
x1 <- data$BETAPLASMA
x2 <-data$FAT
y <- data$RETPLASMA


# 2. 샘플 분할
set.seed(1)
m <- length(y)
n_test <- 115
n_train <- m - n_test #200

idx <- sample(seq_len(m))
train_idx <- idx[1:n_train]
test_idx <- idx[(n_train+1):m]

train_x <- data.frame(x1=x1[train_idx], x2=x2[train_idx])
raw_train_y <- y[train_idx]
test_x <- data.frame(x1=x1[test_idx], x2=x2[test_idx])
raw_test_y <- y[test_idx]


# 3. data transformation
## 3-1. 평균 추정
library(mgcv)
raw_fit <- gam(raw_train_y ~ te(train_x$x1, train_x$x2))
raw_pred_y <- predict(raw_fit, train_x = train_x)
raw_residuals <- raw_train_y - raw_pred_y

## 3-2. 분산 추정 (log transformation)
log_res2 <- log(raw_residuals^2+1e-8)
variance_fit <- gam(log_res2~te(train_x$x1, train_x$x2))
var_list <- exp(predict(variance_fit, train_x = train_x))


## 3-3. Y transformation 된 값을 train_y 로 저장.
train_y <- raw_train_y/sqrt(var_list); train_y


# 4. 평균 및 분산 추정
fit <- gam(train_y ~ te(train_x$x1, train_x$x2)) #평균 추정 모델
residuals <- train_y - predict(fit, train_x = train_x)

B <- predict(fit, type='lpmatrix')
lambda <- fit$sp[1]
D <- diff(diag(ncol(B)), differences=2)
S_inv <- ginv(t(B) %*% B + lambda * t(D) %*% D)
S <- B %*% S_inv %*% t(B)
I_n <- diag(nrow(S))
residual_matrix <- I_n - S
estimated_variance <- (t(residuals) %*% residuals) / (sum(diag(t(residual_matrix) %*% residual_matrix)))
cat('추정된 단일 분산 : ', estimated_variance)


# 5. k-factor 계산
norm_lx_h_values <- numeric(nrow(train_x))
for (j in 1:nrow(train_x)){
  l_xh <- S[j,] #smoother matrix 의 jth row
  norm_lx_h_values[j] <- compute_norm(l_xh)
}

numerator <- sum(diag(t(residual_matrix) %*% residual_matrix))^2
denominator <- sum(diag((t(residual_matrix) %*% residual_matrix)^2))
nu <- numerator / denominator

norm_lx_h_values
k_factors <- sapply(norm_lx_h_values, function(nlh) find_k_factor(nu = nu, norm_lx_h = nlh))
cat('k factors : ', k_factors) #대부분 근사값 사용함.


# 6. TI 계산
pred_y <- predict(fit, train_x=train_x)
TI_upper <- pred_y + k_factors*c(estimated_variance)
TI_lower <- pred_y - k_factors*c(estimated_variance)

# 7. raw_y 에 대한 TI로 변환
raw_TI_upper <- TI_upper * sqrt(var_list)
raw_TI_lower <- TI_lower * sqrt(var_list)
train_coverage <- mean(raw_train_y >= raw_TI_lower & raw_train_y <= raw_TI_upper)
cat('훈련 세트의 커버리지 평균 : ', train_coverage)

# 8. 선형 보간을 이용해 test 의 PICP, NMPIW 계산
library(fields)
tps_lower <- Tps(x=as.matrix(train_x), Y=raw_TI_lower)
tps_upper <- Tps(x=as.matrix(train_x), Y=raw_TI_upper)

test_TIlower <- predict(tps_lower, x=as.matrix(test_x))
test_TIupper <- predict(tps_upper, x = as.matrix(test_x))
cat("선형보간으로 가능한 test 개수:", sum(!is.na(test_TIlower)), "/", length(raw_test_y), "\n") 

test_y <- raw_test_y
covered <- (test_y >= test_TIlower) & (test_y <= test_TIupper)
widths <- raw_TI_upper - raw_TI_lower
MPIW <- mean(widths)
PICP <- mean(covered)
NMPIW <- MPIW / (max(test_y) - min(test_y))

data.frame(PICP = PICP, NMPIW = NMPIW)

